#
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Loads the Docker image from the container registry and then runs the following steps:


# Workflow:
# --------
#
#  Copy cache --> Extract tar -->                      -------> Code quality -------> Unit tests ------------------------>
#                                \                   /                                                                     \
#  Copy .git dir ------------------> Build debug apks                                                                       Save reports to GCS --> Update CI status --> Compress gradle cache --> Save gradle cache to GCS
#                                /                   \                                                                     /
#  Fetch google-services.json -->                      --> Authorize Gcloud --> Build test apks --> Instrumented tests -->
#

steps:

  - name: 'gcr.io/cloud-builders/gsutil'
    id: &copy_gradle_cache 'Copying gradle cache'
    waitFor: [ '-' ]
    # we use rsync and not cp so that this step doesn't fail the first time it's run
    args: [ 'rsync', 'gs://${_CACHE_BUCKET}/', './' ]

  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: &restore_gradle_cache 'Extracting tar'
    waitFor:
      - *copy_gradle_cache
    args:
      - '-c'
      - |
        tar zxf cache.tgz || echo "No cache found"

  # Copy .git directory to workspace.
  # This is needed by gitVersioner plugin for auto-generating version code and version name.
  #
  # TODO: Remove this step when .git can be explicitly included in the tarball using .gcloudignore
  # https://github.com/GoogleCloudPlatform/cloud-builders/issues/401
  - name: 'gcr.io/cloud-builders/git'
    id: &create_git_dir 'Copy .git dir'
    waitFor: [ '-' ]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        git clone --branch master $_HEAD_REPO_URL tmp
        rm -rf .git
        mv tmp/.git .
        rm -rf tmp

  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &config_google_services 'Load debug google-services.json'
    waitFor: [ '-' ]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=$_GOOGLE_SERVICES_JSON --format='get(payload.data)' | tr '_-' '/+' | base64 -d > gnd/google-services.json

  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &assemble_debug 'Assemble debug apks'
    waitFor:
      - *restore_gradle_cache
      - *create_git_dir
      - *config_google_services
    args:
      - '-c'
      - |
        ./gradlew -PdisablePreDex --no-daemon assembleStaging assembleStagingUnitTest assembleStagingAndroidTest

  # Run code quality checks
  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &code_quality 'Run code quality checks'
    waitFor:
      - *assemble_debug
    args:
      - '-c'
      - |
        ./gradlew -PdisablePreDex --no-daemon checkCode 2> check-logs.txt || echo "fail" > build-status.txt
        cat check-logs.txt

  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &unit_tests 'Run unit tests'
    waitFor:
      - *code_quality
    args:
      - '-c'
      - |
        ./gradlew -PdisablePreDex --no-daemon testStagingUnitTest 2> unit-test-logs.txt || echo "fail" > build-status.txt
        cat unit-test-logs.txt

  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &authenticate_gcloud 'Authorize gcloud'
    waitFor:
      - *assemble_debug
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=$_SECRET_NAME --format='get(payload.data)' | tr '_-' '/+' | base64 -d > client-secret.json
        gcloud auth activate-service-account --key-file client-secret.json

  # For more details: https://cloud.google.com/sdk/gcloud/reference/alpha/firebase/test/android/run
  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &instrumented_tests 'Run instrumented tests'
    waitFor:
      - *authenticate_gcloud
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud --quiet beta firebase test android run \
        --type instrumentation --num-uniform-shards=1 \
        --app gnd/build/outputs/apk/staging/*.apk \
        --test gnd/build/outputs/apk/androidTest/staging/*.apk \
        --device model=Pixel2,version=28,locale=en,orientation=portrait \
        --results-bucket ${_ARTIFACT_BUCKET} \
        --results-dir "$BRANCH_NAME-$BUILD_ID/reports" \
        --timeout 20m

  - name: 'gcr.io/cloud-builders/gsutil'
    id: &save_reports 'Save reports to GCS'
    waitFor:
      - *unit_tests
      - *instrumented_tests
    args: [ 'cp', '-r',
            'gnd/build/reports',
            'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/reports' ]

  # Update status badge and fail build if errors were found in "build" step
  - name: 'gcr.io/cloud-builders/gsutil'
    id: &update_status 'Update build status'
    waitFor:
      - *save_reports
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Display artifact bucket link
        echo "Reports uploaded to https://console.cloud.google.com/storage/browser/${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/"

        # Update build status if running on master branch
        if [[ "${_PUSH_TO_MASTER}" ]]; then

          # Gradle Dependencies Status
          if [[ -f gnd/build/reports/dependencyUpdates/report.json ]]; then
            python cloud-builder/generate_dependency_health_svg.py gnd/build/reports/dependencyUpdates/report.json dependency.svg

            # Copy artifacts for Github badge
            gsutil cp dependency.svg gs://${_CACHE_BUCKET}/dependency.svg
            gsutil cp gnd/build/reports/dependencyUpdates/report.txt gs://${_CACHE_BUCKET}/dependency.txt

            # Makes files publicly readable
            gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/dependency.svg
            gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/dependency.txt
          fi

          # Build Status
          if [ -f build-status.txt ] && [ $(< build-status.txt) == "fail" ]; then
            gsutil cp cloud-builder/failure.svg gs://${_CACHE_BUCKET}/status.svg
          else
            gsutil cp cloud-builder/success.svg gs://${_CACHE_BUCKET}/status.svg
          fi

          # Make file publicly readable
          gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/status.svg
        fi

        # Delayed build fail
        if [ -f build-status.txt ] && [ $(< build-status.txt) == "fail" ]; then
          cat check-logs.txt
          cat unit-test-logs.txt
          exit 1
        fi

  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: &build_cache 'Compress gradle build cache'
    waitFor:
      - *update_status
    args:
      - '-c'
      - |
        tar zcf cache.tgz .gradle

  - name: 'gcr.io/cloud-builders/gsutil'
    id: &save_cache 'Save gradle cache to GCS'
    waitFor:
      - *build_cache
    args: [ 'cp', 'cache.tgz', 'gs://${_CACHE_BUCKET}/cache.tgz' ]

options:
  env:
    - 'GRADLE_USER_HOME=/workspace/.gradle'
  logging: GCS_ONLY

timeout: 1800s
